/*==============================================================================

   ゲーム処理 [game.cpp]
														 Author :
														 Date   :
--------------------------------------------------------------------------------

==============================================================================*/

#include "game.h"
#include "main.h"
#include "input.h"
#include "fade.h"
#include "player.h"
#include "enemy.h"
#include "bullet.h"
#include "collision.h"
#include "sound.h"
#include "score.h"
#include "Stage.h"

/*------------------------------------------------------------------------------
   定数定義
------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
   構造体宣言
------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
   プロトタイプ宣言
------------------------------------------------------------------------------*/


/*------------------------------------------------------------------------------
   グローバル変数の定義
------------------------------------------------------------------------------*/
static int	g_BGMNo = 0;		// BGM識別子

Stage stage;

/*------------------------------------------------------------------------------
   初期化関数
------------------------------------------------------------------------------*/
void Game::Initialize(void)
{
	
	if (stage.stage_num_flag) {
		stage.stage_num_flag = false;

		if (stage.stage_num_ >= stage_num_max - 1) {
			stage.stage_num_ = 0;
		}
		else {
			stage.stage_num_++;
		}

	}

	stage_num = stage.stage_num_;
	
	stage.Init();

	InitBullet();
	InitScore();

	g_BGMNo = LoadSound("data/BGM/battle.wav");
	//Playsound(BGMの番号,0〜254);
	PlaySound(g_BGMNo, 254);
}

/*------------------------------------------------------------------------------
   終了処理をする関数
------------------------------------------------------------------------------*/
void Game::Terminate()
{
	stage.Uninit();

	UninitScore();
	UninitBullet();

	StopSoundAll();
}

/*------------------------------------------------------------------------------
   更新処理をする関数
------------------------------------------------------------------------------*/
void Game::Update(void)
{
	stage.Update();

	UpdateBullet();
	UpdateScore();

	result = stage.result;

	//スペースキーが押されていて、フェード処理中ではないとき
	if (GetKeyboardTrigger(DIK_RETURN) && GetFadeState() == FADE_NONE) {

		stage_num_flag = true;

		//RESULTへ移行する
		SceneTransition(SCENE_RESULT);
	}

	
}

/*------------------------------------------------------------------------------
   描画処理をする関数
------------------------------------------------------------------------------*/
void Game::Draw(void)
{
	stage.Draw();

	DrawBullet();
	
	DrawScore();
}

